
AMIT - Car Control using Hand Motion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001430  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b66  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001014  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fa  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051c  00000000  00000000  00004142  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000465e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 03 01 	call	0x206	; 0x206 <main>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Master_APP_Init>:
 *									Functions                                  *
 *******************************************************************************/

void Master_APP_Init (void)
{
	Potentiometer_Init();
  7c:	0e 94 4e 00 	call	0x9c	; 0x9c <Potentiometer_Init>
	UARTCom_Init();
  80:	0e 94 48 00 	call	0x90	; 0x90 <UARTCom_Init>
  84:	08 95       	ret

00000086 <Master_APP_Start>:
}

void Master_APP_Start (void)
{
	Master_APP_Init();
  86:	0e 94 3e 00 	call	0x7c	; 0x7c <Master_APP_Init>
	
	while(1)
	{
		Scheduler_Start();
  8a:	0e 94 c6 00 	call	0x18c	; 0x18c <Scheduler_Start>
  8e:	fd cf       	rjmp	.-6      	; 0x8a <Master_APP_Start+0x4>

00000090 <UARTCom_Init>:
 *								Functions                                      *
 *******************************************************************************/

void UARTCom_Init (void)
{
	UART_Init();
  90:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Init>
  94:	08 95       	ret

00000096 <UARTSend_Message>:
}

void UARTSend_Message (uint8 Msg)
{
	UART_TxChar(Msg);
  96:	0e 94 c2 00 	call	0x184	; 0x184 <UART_TxChar>
  9a:	08 95       	ret

0000009c <Potentiometer_Init>:
 *                              Functions									   *
 *******************************************************************************/

void Potentiometer_Init (void)
{
	ADC_Init();
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Init>
  a0:	08 95       	ret

000000a2 <Potentiometer_Read>:
}

uint16 Potentiometer_Read (ADC_Channel Channel)
{
	return ADC_READ(Channel);
  a2:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_READ>
  a6:	08 95       	ret

000000a8 <ADC_Init>:
 *******************************************************************************/

void ADC_Init(void)
{
	/* Enable ADC */
	SET_BIT(ADCSRA_REG, ADC_EN_BIT);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	86 b9       	out	0x06, r24	; 6
	
	/* Setting the PSC	between 50k to 200k HZ */
	ADCSRA_REG &= 0xF8;
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	86 b9       	out	0x06, r24	; 6
	ADCSRA_REG |= 0x07;
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	86 b9       	out	0x06, r24	; 6
	
	/* Setting AVCC AS Voltage Reference */
	SET_BIT(ADMUX_REG, REFS0_BIT);
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX_REG, REFS1_BIT);
  c0:	87 b1       	in	r24, 0x07	; 7
  c2:	8f 77       	andi	r24, 0x7F	; 127
  c4:	87 b9       	out	0x07, r24	; 7
  c6:	08 95       	ret

000000c8 <ADC_READ>:
}

uint16 ADC_READ(ADC_Channel Channel)
{
	uint16 Read;
	ADMUX_REG &= 0xE0;
  c8:	97 b1       	in	r25, 0x07	; 7
  ca:	90 7e       	andi	r25, 0xE0	; 224
  cc:	97 b9       	out	0x07, r25	; 7
	ADMUX_REG |= Channel;
  ce:	97 b1       	in	r25, 0x07	; 7
  d0:	89 2b       	or	r24, r25
  d2:	87 b9       	out	0x07, r24	; 7
	
	SET_BIT(ADCSRA_REG, ADC_SC_BIT);
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	86 b9       	out	0x06, r24	; 6
	
	while(READ_BIT(ADCSRA_REG, ADC_ADIF_BIT) == 0);
  da:	34 9b       	sbis	0x06, 4	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <ADC_READ+0x12>
	
	SET_BIT(ADCSRA_REG, ADC_ADIF_BIT);
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	86 b9       	out	0x06, r24	; 6
	
	Read = ADCL_REG;
  e4:	24 b1       	in	r18, 0x04	; 4
	Read |= ADCH_REG << 8;
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	98 2f       	mov	r25, r24
  ec:	88 27       	eor	r24, r24
	
	return Read;
}
  ee:	82 2b       	or	r24, r18
  f0:	08 95       	ret

000000f2 <__vector_11>:
		break;
	}
}
#if TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	static uint32 Local_uint32_Counter = 0;
	Local_uint32_Counter++;
 114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 122:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(Local_uint32_Counter == Timer_uint32_NumOfOverFlows)
 126:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <Timer_uint32_NumOfOverFlows>
 12a:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <Timer_uint32_NumOfOverFlows+0x1>
 12e:	82 17       	cp	r24, r18
 130:	93 07       	cpc	r25, r19
 132:	69 f4       	brne	.+26     	; 0x14e <__vector_11+0x5c>
	{
		Timer0_CallBack();
 134:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Timer0_CallBack>
 138:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <Timer0_CallBack+0x1>
 13c:	09 95       	icall
		TCNT0_REG = 256 - Timer_uint8_RemTicks;
 13e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Timer_uint8_RemTicks>
 142:	81 95       	neg	r24
 144:	82 bf       	out	0x32, r24	; 50
		Local_uint32_Counter = 0;
 146:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <UART_Init>:

uint8 UART_RxChar (void)
{
	while (!(UCSRA_REG & (1<<RXC_BIT)));									/* Wait till data is received */
	return UDR_REG;															/* Return the byte*/
}
 170:	8a b1       	in	r24, 0x0a	; 10
 172:	88 61       	ori	r24, 0x18	; 24
 174:	8a b9       	out	0x0a, r24	; 10
 176:	80 b5       	in	r24, 0x20	; 32
 178:	86 68       	ori	r24, 0x86	; 134
 17a:	80 bd       	out	0x20, r24	; 32
 17c:	83 e3       	ldi	r24, 0x33	; 51
 17e:	89 b9       	out	0x09, r24	; 9
 180:	10 bc       	out	0x20, r1	; 32
 182:	08 95       	ret

00000184 <UART_TxChar>:

void UART_TxChar (uint8 message)
{
	while (! (UCSRA_REG & (1<<UDRE_BIT)));									/* Wait for empty transmit buffer*/
 184:	5d 9b       	sbis	0x0b, 5	; 11
 186:	fe cf       	rjmp	.-4      	; 0x184 <UART_TxChar>
	UDR_REG = message;
 188:	8c b9       	out	0x0c, r24	; 12
 18a:	08 95       	ret

0000018c <Scheduler_Start>:
	
	while(1)
	{
		STATE = 0;
		
		Front_Sensor = Potentiometer_Read (Sensor1);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 51 00 	call	0xa2	; 0xa2 <Potentiometer_Read>
 192:	8c 01       	movw	r16, r24
		Back_Sensor  = Potentiometer_Read (Sensor2);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 51 00 	call	0xa2	; 0xa2 <Potentiometer_Read>
 19a:	ec 01       	movw	r28, r24
		Left_Sensor  = Potentiometer_Read (Sensor3);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 51 00 	call	0xa2	; 0xa2 <Potentiometer_Read>
 1a2:	7c 01       	movw	r14, r24
		Right_Sensor = Potentiometer_Read (Sensor4);
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	0e 94 51 00 	call	0xa2	; 0xa2 <Potentiometer_Read>
 1aa:	9c 01       	movw	r18, r24
		
		if (Front_Sensor > Back_Sensor)
 1ac:	c0 17       	cp	r28, r16
 1ae:	d1 07       	cpc	r29, r17
 1b0:	48 f4       	brcc	.+18     	; 0x1c4 <Scheduler_Start+0x38>
		{
			STATE |= FRONT;
			
			if (Front_Sensor > HIGHER_THRESHOLD)
 1b2:	01 30       	cpi	r16, 0x01	; 1
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	18 07       	cpc	r17, r24
 1b8:	70 f4       	brcc	.+28     	; 0x1d6 <Scheduler_Start+0x4a>
			{
				STATE |= FAST;
			}
			
			else if (Front_Sensor > LOWER_THRESHOLD )
 1ba:	01 30       	cpi	r16, 0x01	; 1
 1bc:	11 40       	sbci	r17, 0x01	; 1
 1be:	68 f0       	brcs	.+26     	; 0x1da <Scheduler_Start+0x4e>
			STATE &= SLOW;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	10 c0       	rjmp	.+32     	; 0x1e4 <Scheduler_Start+0x58>
		
		else
		{
			STATE &= BACK;
			
			if (Back_Sensor > HIGHER_THRESHOLD)
 1c4:	c1 30       	cpi	r28, 0x01	; 1
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	d8 07       	cpc	r29, r24
 1ca:	48 f4       	brcc	.+18     	; 0x1de <Scheduler_Start+0x52>
			STATE |= FAST;
			
			else if (Back_Sensor > LOWER_THRESHOLD )
 1cc:	c1 30       	cpi	r28, 0x01	; 1
 1ce:	d1 40       	sbci	r29, 0x01	; 1
 1d0:	40 f0       	brcs	.+16     	; 0x1e2 <Scheduler_Start+0x56>
			STATE &= SLOW;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <Scheduler_Start+0x58>
		{
			STATE |= FRONT;
			
			if (Front_Sensor > HIGHER_THRESHOLD)
			{
				STATE |= FAST;
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <Scheduler_Start+0x58>
			
			else if (Front_Sensor > LOWER_THRESHOLD )
			STATE &= SLOW;
			
			else
			STATE = STOP;
 1da:	8f e0       	ldi	r24, 0x0F	; 15
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <Scheduler_Start+0x58>
		else
		{
			STATE &= BACK;
			
			if (Back_Sensor > HIGHER_THRESHOLD)
			STATE |= FAST;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <Scheduler_Start+0x58>
			
			else if (Back_Sensor > LOWER_THRESHOLD )
			STATE &= SLOW;
			
			else
			STATE = STOP;
 1e2:	8f e0       	ldi	r24, 0x0F	; 15
		}
		
		if (Left_Sensor > Right_Sensor)
 1e4:	2e 15       	cp	r18, r14
 1e6:	3f 05       	cpc	r19, r15
 1e8:	38 f4       	brcc	.+14     	; 0x1f8 <Scheduler_Start+0x6c>
		{
			if (Left_Sensor > MIDDLE_THRESHOLD)
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	e9 16       	cp	r14, r25
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	f9 06       	cpc	r15, r25
 1f2:	30 f0       	brcs	.+12     	; 0x200 <Scheduler_Start+0x74>
			STATE |= LEFT;
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <Scheduler_Start+0x74>
			}
		}
		
		else
		{
			if (Right_Sensor > MIDDLE_THRESHOLD)
 1f8:	21 30       	cpi	r18, 0x01	; 1
 1fa:	32 40       	sbci	r19, 0x02	; 2
 1fc:	08 f0       	brcs	.+2      	; 0x200 <Scheduler_Start+0x74>
			STATE |= RIGHT;
 1fe:	88 60       	ori	r24, 0x08	; 8
			{
				/* do nothing */
			}
		}
		
		UARTSend_Message(STATE);
 200:	0e 94 4b 00 	call	0x96	; 0x96 <UARTSend_Message>
	}
 204:	c3 cf       	rjmp	.-122    	; 0x18c <Scheduler_Start>

00000206 <main>:
 *******************************************************************************/

int main()
{
#if Mode == MASTER
	Master_APP_Start();		/* MASTER APP Mode */
 206:	0e 94 43 00 	call	0x86	; 0x86 <Master_APP_Start>

#elif Mode == SLAVE	
	Slave_APP_Start();		/* SLAVE APP Mode */
	
#endif
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
